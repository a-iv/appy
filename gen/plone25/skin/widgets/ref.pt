<tal:comment replace="nothing">
  We begin with some sub-macros used within macro "show" defined below.
</tal:comment>

<metal:objectTitle define-macro="objectTitle">
  <tal:comment replace="nothing">Displays the title of a referenced object, with a link on
    it to reach the consult view for this object. If we are on a back reference, the link
    allows to reach the correct page where the forward reference is defined. If we are
    on a forward reference, the "nav" parameter is added to the URL for allowing to navigate
    from one object to the next/previous on skyn/view.</tal:comment>
  <a tal:define="includeShownInfo includeShownInfo | python:False;
                 navInfo python:'ref.%s.%s:%s.%d.%d' % (contextObj.UID(), fieldName, appyType['page'], repeat['obj'].number()+startNumber, totalNumber);
                 navInfo python: appyType['isBack'] and '' or navInfo;
                 pageName python: appyType['isBack'] and appyType['backd']['page'] or 'main';
                 fullUrl python: obj.getUrl(page=pageName, nav=navInfo)"
     tal:attributes="href fullUrl" tal:content="python: (not includeShownInfo) and obj.Title() or contextObj.getReferenceLabel(fieldName, obj.appy())"></a>
</metal:objectTitle>

<metal:objectActions define-macro="objectActions">
  <tal:comment replace="nothing">Displays icons for triggering actions on a given
    referenced object (edit, delete, etc).</tal:comment>
  <table class="no-style-table" cellpadding="0" cellspacing="0">
    <tr>
    <tal:comment replace="nothing">Arrows for moving objects up or down</tal:comment>
    <td class="noPadding" tal:condition="python: (len(objs)&gt;1) and member.has_permission('Modify portal content', contextObj)">
      <tal:moveRef define="objectIndex  python: contextObj.getAppyRefIndex(fieldName, obj);
                           ajaxBaseCall python: navBaseCall.replace('**v**', '\'%s\',\'ChangeRefOrder\', {\'refObjectUid\':\'%s\', \'move\':\'**v**\'}' % (startNumber, obj.UID()))">
      <tal:comment replace="nothing">Move up</tal:comment>
      <img tal:condition="python: objectIndex &gt; 0"
        tal:attributes="src string: $portal_url/skyn/arrowUp.png;
                        title python: tool.translate('move_up');
                        onClick python: ajaxBaseCall.replace('**v**', 'up')"
        style="cursor:pointer"/>
      <tal:comment replace="nothing">Move down</tal:comment>
      <img tal:condition="python: objectIndex &lt; (totalNumber-1)"
        tal:attributes="src string: $portal_url/skyn/arrowDown.png;
                        title python: tool.translate('move_down');
                        onClick python: ajaxBaseCall.replace('**v**', 'down')"
        style="cursor:pointer"/>
      </tal:moveRef>
    </td>
    <tal:comment replace="nothing">Edit the element</tal:comment>
    <td class="noPadding">
       <a tal:define="navInfo python:'ref.%s.%s:%s.%d.%d' % (contextObj.UID(), fieldName, appyType['page'], repeat['obj'].number()+startNumber, totalNumber);"
          tal:attributes="href python: obj.getUrl(mode='edit', page='main', nav=navInfo)"
        tal:condition="python: member.has_permission('Modify portal content', obj)">
        <img title="label_edit" i18n:domain="plone" i18n:attributes="title"
             tal:attributes="src string: $portal_url/skyn/edit.gif"/>
    </a></td>
    <tal:comment replace="nothing">Delete the element</tal:comment>
    <td class="noPadding">
      <img tal:condition="python: member.has_permission('Delete objects', obj)"
           title="Delete" i18n:domain="plone" i18n:attributes="title" style="cursor:pointer"
           tal:attributes="src string: $portal_url/skyn/delete.png;
                           onClick python:'onDeleteObject(\'%s\')' % obj.UID()"/>
    </td>
    </tr>
  </table>
</metal:objectActions>

<metal:plusIcon define-macro="plusIcon">
    <tal:comment replace="nothing">Displays the "plus" icon that allows to add new object
      through a reference widget. Indeed, If field was declared as "addable", we must provide
      an icon for creating a new linked object (at least if multiplicities allow it).</tal:comment>
  <img style="cursor:pointer" tal:condition="showPlusIcon"
       tal:define="navInfo python:'ref.%s.%s:%s.%d.%d' % (contextObj.UID(), fieldName, appyType['page'], 0, totalNumber);"
       tal:attributes="src string:$portal_url/skyn/plus.png;
                       title python: tool.translate('add_ref');
                       onClick python: 'href: window.location=\'%s/skyn/do?action=Create&type_name=%s&nav=%s\'' % (folder.absolute_url(), linkedPortalType, navInfo)"/>
</metal:plusIcon>

<tal:comment replace="nothing">
  This macro displays, in a cell header from a ref table, icons for sorting the
  ref field according to the field that corresponds to this column.
</tal:comment>
<metal:sortIcons define-macro="sortIcons"
    tal:define="ajaxBaseCall python: navBaseCall.replace('**v**', '\'%s\',\'SortReference\', {\'sortKey\':\'%s\', \'reverse\':\'**v**\'}' % (startNumber, shownField))" tal:condition="python: canWrite and tool.isSortable(shownField, objs[0].meta_type, 'ref')">
  <img style="cursor:pointer"
       tal:attributes="src string:$portal_url/skyn/sortAsc.png;
                       onClick python: ajaxBaseCall.replace('**v**', 'False')"/>
  <img style="cursor:pointer"
       tal:attributes="src string:$portal_url/skyn/sortDesc.png;
                       onClick python: ajaxBaseCall.replace('**v**', 'True')"/>
</metal:sortIcons>

<tal:comment replace="nothing">View macro for a Ref.</tal:comment>
<div metal:define-macro="view"
     tal:define= "innerRef   innerRef|python:False;
                  ajaxHookId python: contextObj.UID() + name"
     tal:attributes = "id ajaxHookId">
  <script language="javascript"
          tal:content="python: 'askRefField(\'%s\',\'%s\',\'%s\',\'%s\',0)' % (ajaxHookId, contextObj.absolute_url(), name, innerRef)">
  </script>
</div>

<tal:comment replace="nothing">
   This macro is called by a XmlHttpRequest for displaying the paginated
   referred objects of a reference field.
</tal:comment>
<div metal:define-macro="viewContent"
     tal:define="fieldName request/fieldName;
                 appyType python: contextObj.getAppyType(fieldName, asDict=True);
                 innerRef python: test(request['innerRef']=='True', True, False);
                 ajaxHookId python: contextObj.UID()+fieldName;
                 startNumber python: int(request.get('%s_startNumber' % ajaxHookId, 0));
                 tool contextObj/getTool;
                 refObjects python:contextObj.getAppyRefs(fieldName, startNumber);
                 objs refObjects/objects;
                 totalNumber refObjects/totalNumber;
                 batchSize refObjects/batchSize;
                 folder python: contextObj.isPrincipiaFolderish and contextObj or contextObj.getParentNode();
                 flavour python:tool.getFlavour(contextObj);
                 linkedPortalType python:flavour.getPortalType(appyType['klass']);
                 addPermission python: '%s: Add %s' % (tool.getAppName(), linkedPortalType);
                 canWrite python: not appyType['isBack'] and member.has_permission(appyType['writePermission'], contextObj);
                 multiplicity appyType/multiplicity;
                 maxReached python:(multiplicity[1] != None) and (len(objs) >= multiplicity[1]);
                 showPlusIcon python:not appyType['isBack'] and appyType['add'] and not maxReached and member.has_permission(addPermission, folder) and canWrite;
                 atMostOneRef python: (multiplicity[1] == 1) and (len(objs)&lt;=1);
                 label python: tool.translate(appyType['labelId']);
                 description python: tool.translate(appyType['descrId']);
                 navBaseCall python: 'askRefField(\'%s\',\'%s\',\'%s\',\'%s\',**v**)' % (ajaxHookId, contextObj.absolute_url(), fieldName, innerRef)">

  <tal:comment replace="nothing">This macro displays the Reference widget on a "consult" page.

  The definition of "atMostOneRef" above may sound strange: we shouldn't check the actual number
  of referenced objects. But for back references people often forget to specify multiplicities.
  So concretely, multiplicities (0,None) are coded as (0,1).</tal:comment>

  <tal:atMostOneReference condition="atMostOneRef">
    <tal:comment replace="nothing">Display a simplified widget if maximum number of
      referenced objects is 1.</tal:comment>
    <table class="no-style-table" cellpadding="0" cellspacing="0"><tr valign="top">
      <td><span class="appyLabel" tal:condition="python: not innerRef and not appyType['link']"
                tal:content="structure label"></span></td>

      <tal:comment replace="nothing">If there is no object...</tal:comment>
      <tal:noObject condition="not:objs">
        <td tal:content="python: tool.translate('no_ref')"></td>
        <td><metal:plusIcon use-macro="portal/skyn/widgets/ref/macros/plusIcon"/></td>
      </tal:noObject>

      <tal:comment replace="nothing">If there is an object...</tal:comment>
      <tal:objectIsPresent condition="objs">
        <tal:obj repeat="obj objs">
          <td tal:define="includeShownInfo python:True"><metal:showObjectTitle use-macro="portal/skyn/widgets/ref/macros/objectTitle" /></td>
          <td tal:condition="not: appyType/isBack">
            <metal:showObjectActions use-macro="portal/skyn/widgets/ref/macros/objectActions" />
          </td>
        </tal:obj>
      </tal:objectIsPresent>
    </tr></table>
  </tal:atMostOneReference>

  <tal:comment replace="nothing">Display a fieldset in all other cases.</tal:comment>
  <tal:anyNumberOfReferences condition="not: atMostOneRef">
    <fieldset tal:attributes="class python:test(innerRef, 'innerAppyFieldset', '')">
      <legend tal:condition="python: not innerRef or showPlusIcon">
        <span tal:condition="not: innerRef" tal:content="label"/>
        (<span tal:replace="totalNumber"/>)
        <metal:plusIcon use-macro="portal/skyn/widgets/ref/macros/plusIcon"/>
      </legend>

      <tal:comment replace="nothing">Object description</tal:comment>
      <!--p tal:condition="python: not innerRef and description.strip()"
         tal:content="description" class="discreet" ></p-->

      <tal:comment replace="nothing">Appy (top) navigation</tal:comment>
      <metal:nav use-macro="here/skyn/navigate/macros/appyNavigate"/>

      <tal:comment replace="nothing">No object is present</tal:comment>
      <p tal:condition="not:objs" tal:content="python: tool.translate('no_ref')"></p>

      <table width="100%" cellspacing="0" cellpadding="0" tal:condition="objs"
             tal:attributes="class python:test(innerRef, 'innerAppyTable', '')">
        <tr valign="bottom"><td>

        <tal:comment replace="nothing">Show backward reference(s)</tal:comment>
        <table class="no-style-table" cellspacing="0" cellpadding="0"
               tal:condition="python: appyType['isBack'] and objs">
          <tr tal:repeat="obj objs">
            <td><metal:showObjectTitle use-macro="portal/skyn/widgets/ref/macros/objectTitle" />
            </td>
          </tr>
        </table>

        <tal:comment replace="nothing">Show forward reference(s)</tal:comment>
        <table tal:attributes="class python:test(innerRef, '', 'listing nosort');
                               width python:test(innerRef, '100%', appyType['layouts']['view']['width']);"
               align="right" tal:condition="python: not appyType['isBack'] and objs" cellpadding="0" cellspacing="0">
          <tal:widgets define="widgets python: objs[0].getAppyTypesFromNames(appyType['shownInfo'])">
          <tr tal:condition="appyType/showHeaders">
            <th tal:condition="python: 'title' not in appyType['shownInfo']"
                tal:define="shownField python:'title'">
              <span tal:content="python: tool.translate('ref_name')"></span>
              <metal:sortIcons use-macro="portal/skyn/widgets/ref/macros/sortIcons" />
            </th>
            <th tal:repeat="widget widgets">
              <tal:header define="shownField widget/name">
                <span tal:content="python: tool.translate(widget['labelId'])"></span>
                <metal:sortIcons use-macro="portal/skyn/widgets/ref/macros/sortIcons" />
              </tal:header>
            </th>
            <th tal:content="python: tool.translate('ref_actions')"></th>
          </tr>
          <tal:row repeat="obj objs">
          <tr valign="top" tal:define="odd repeat/obj/odd"
              tal:attributes="class python:test(odd, 'even', 'odd')">
            <tal:comment replace="nothing">Object title, shown here if not specified somewhere
              else in appyType.shownInfo.</tal:comment>
            <td tal:condition="python: 'title' not in appyType['shownInfo']"><metal:showObjectTitle
                use-macro="portal/skyn/widgets/ref/macros/objectTitle"/>
            </td>
            <tal:comment replace="nothing">Additional fields that must be shown</tal:comment>
            <td tal:repeat="widget widgets">
              <tal:showTitle condition="python: widget['name'] == 'title'">
                <metal:showObjectTitle use-macro="portal/skyn/widgets/ref/macros/objectTitle"/>
              </tal:showTitle>
              <tal:showOtherField define="contextObj python:obj;
                                          layoutType python: 'cell';
                                          innerRef python:True"
                                  condition="python: widget['name'] != 'title'">
                <metal:showField use-macro="portal/skyn/widgets/show/macros/field" />
              </tal:showOtherField>
            </td>
            <tal:comment replace="nothing">Actions</tal:comment>
            <td align="right">
              <metal:showObjectActions use-macro="portal/skyn/widgets/ref/macros/objectActions" />
            </td>
          </tr>
          </tal:row>
          </tal:widgets>
        </table>

        </td></tr>
      </table>

      <tal:comment replace="nothing">Appy (bottom) navigation</tal:comment>
      <metal:nav use-macro="here/skyn/navigate/macros/appyNavigate"/>

    </fieldset>
    <tal:comment replace="nothing">A carriage return needed in some cases.</tal:comment>
    <br tal:define="widgetDescr widgetDescr|nothing"
        tal:condition="python: not widgetDescr or (widgetDescr['widgetType'] != 'group')"/>
  </tal:anyNumberOfReferences>
</div>

<tal:comment replace="nothing">Edit macro for an Ref.</tal:comment>
<div metal:define-macro="edit"
     tal:condition="widget/link"
     tal:define="rname           python: 'appy_ref_%s' % name;
                 requestValue    python: request.get(rname, []);
                 inRequest       python: request.has_key(rname);
                 allObjects      python: contextObj.getSelectableAppyRefs(name);
                 refUids         python: [o.UID() for o in contextObj.getAppyRefs(name)['objects']];
                 isBeingCreated  python: contextObj.isTemporary() or ('/portal_factory/' in contextObj.absolute_url())">

  <select tal:attributes="name rname;
                          multiple python: isMultiple and 'multiple' or ''">
    <option tal:condition="not: isMultiple" i18n:translate="choose_a_value"></option>
    <tal:ref repeat="refObj allObjects">
      <option tal:define="uid python: contextObj.getReferenceUid(refObj)"
              tal:content="python: contextObj.getReferenceLabel(name, refObj)"
              tal:attributes="value uid;
                              selected python:(inRequest and (uid in requestValue) or (not inRequest and ((uid in refUids)))) and True or False">
      </option>
    </tal:ref>
  </select>
</div>

<tal:comment replace="nothing">Cell macro for a Ref.</tal:comment>
<metal:cell define-macro="cell">
  <metal:call use-macro="portal/skyn/widgets/ref/macros/view"/>
</metal:cell>

<tal:comment replace="nothing">Search macro for a Ref.</tal:comment>
<metal:search define-macro="search"></metal:search>
