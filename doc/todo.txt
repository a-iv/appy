vpod
v- Error in buffers.py line 422 (in method evaluate): evalEntry.action may be None but I don't know why (maybe due to buffers cut?)
v- Document the ability to read the template from memory, not only from the file system (it seems to work)
v- Size of resulting ODTs is too big.
v- Try to convert xhtml chunks that are not utf-8-encoded
v- XHTML conversion is not implemented for all XHTML tags.
v- XHTML conversion produces empty results for some XHTML tag combinations
v- Implement a function "pod" that allows to insert the content of another pod template into the current file
v- Implement a "retry n times" function when calling OO in server mode ("n" should be parameterized)
v- Add a "do bullet" (li, ul) ?
v- Add a function "text" that replaces "carriage returns" with &lt;/p&gt;&lt;p&gt; (ou &lt;br/&gt;?) and that replaces leading dashes with bullets.
v- Deprecate "xhtml" function -> New function text(format=...) with format="xhtml" or "text" or...
v- ImageImporter: adding 'g' to file names may lead to too long file names.
v- Finalize function "document" (manage Microsoft formats: doc, xls...)
v- converter.py: allow to call converter.py without updating sections and/or indexes (may cause performance problems?)
v- When an error occurs in a for loop, the iteratr variable may not be incremented, which duplicates the errors in subsequent iterations. Try:finally?

vgen
v- View on AppyFolder must be query.pt
v- Build automatically a research page (included fields are selectable through the flavour) only with "searchable" fields.
v- Correct some navigation problems (after actions like delete, edit, etc)
v- Validation system: check if it is possible to forget about duplicating page and group labels in child classes. Possible to remove xxx_list labels?
v- Add a button for checking if current Python running Zope is UNO-compliant.
v- __setattr__ for Refs on Wrappers do not work, but the problem is solved in method "create" (inspiration source).
v- Generate a static site from a gen-application
v- Xml export (on file system or via webdav/REST)
v- Add an option to generator, where un-managed i18n labels are removed (useful during development, when fields are creates, deleted, renamed...)
v- Make the list of reserved attribute and method names (tool, trigger, state, ...) and raise errors on generation if those names are used by a gen-class
v- produceNiceDefault: manage numbers (when a number is encountered, add a space, etc).
v- When editing (not creating) a flavour (or when reinstalling the product), create ALL the portal_types if they do not exist (some may have been added after flavour creation).
v- By flavour or date object, add 2 params: date format with and without hour. Create a appy-specific macro for displaying dates, that will use those params.
v- Move some generated code (appyMixins, CommonMethods...) in appy.gen (minimize generated code).
v- Create the "pod" field type
v- Add on tool special action "uninstall" (similar to special action "install") + question "update workflow settings or not" ?
v- At startup, patch actions "tool.install" -> show = si selon Plone le Product doit etre reinstallÃ©, i18n messages, etc.
v- Allow to create objects in the app root folder (and not only in the tool) from the tool (or anywhere else).
v- On dashboards and Ref tables, fields rendering does not always take into account permissions, show, etc.
v- Add "self.flavour" on any wrapper.
v- Config instance: add supposed number of flavours (for generating corresponding i18n labels _1, _2, etc, for flavour-specific content-types)
v- Config instance: create a defaultWorkflow attribute, similar to defaultCreators
v- Duplicate all special fields (optionalFieldsFor, defaultValueFor, etc) generated in a flavour for all child classes of a given class.
v- Permissions-to-roles mappings: if you don't specify a value for a given field-specific read/write permission, by default it will take the same value as for the whole-gen-class read/write permission.
v- Implement abstract workflows
v- displayTabs: do not display tabs for which no widget shows up (ie edit tabs on which no Ref widget is shown)
v- Add i18n labels for messages when transitions are triggered (! transition may potentially return a custom message!)
v- On all widgets: implement "warning method" -> kind of condition. If True, a warning message appears somewhere near the field. Useful for actions, transitions and pod templates.
v- Action fields: add param "confirm" (also for workflow transitions): if True a popup appears (with possibility to define a i18n message)
v- Ref fields: add parameter "sort" for sorting Ref fields (this param may be the name of a field or a custom method). On Refs with link=True, it is used for sorting the list of all references that may be linked with the current object; on Refs with add=True, it is used for inserting the newly created object.
v- tool.getReferenceLabel: use brain if fields are indexed (wake up object only when needed)
v- Delete tool.maxListBoxWidth and use param "width" of Ref field instead.
v- Comments in ZPTs: use everywhere tal tag "comment"
v- Common method "fieldValueSelected" -> does it produce the right value when the page is shown again due to a validation error? Must we check this case explicitly via emptyness of dict "errors" in request?
v- Document how to write your own code generator
v- pod integratio: when returning a PDF/ODT file, file name is not set (or file extension).
v- Add a param to pod fields will allow to freeze generated result, and to unfreeze or re-generate them (with admin access only or...?)
v- Take into account field-specific permissions when displaying backward fields
v- Improve graphical rendering of pages with additional classes (Group, Page,...) that may be specified instead of strings for parameters "group", "page" on fields
v- Add an event management system (generalize the mail notification mechanism from PloneMeeting) that one may customize per flavour, with some predefined action types (emails, log, freeze pdf,...)
v- Interoperability: class and worklow inheritance from one product to another and Refs to objects coming from other standard non Appy Plone products.
v- Add a mechanism that will allow developers to add things like ZPTs, etc, into the Plone product.
v- Write a test system.
v- Bug (seems to come from standard Plone): when defining a field multiselection mandatory, when unselecting all values, it does not do anything (if the field is not mandatory it works).
v- When we copy fields in class Flavour (because of editDefault), we must also recopy methods that were defined on the original Appy class on the FLavour class generated in appyWrappers.py.
v- Check accessors get_flavour defined multiple times in PodTemplate_Wrapper
v- Bug: when we specify encoding in a Python file, the generated Python AST is empty.
v- plone25: remove warnings by setting deprecated=True for all generated classes in configure.zcml
v- Workflow dependencies: permissions of a given object can depend on the ones defined on another (containing?).
v- Add an on-line help system (popup for every field)

